// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/geraldkohn/elian/data/model"
)

func newStaff(db *gorm.DB) staff {
	_staff := staff{}

	_staff.staffDo.UseDB(db)
	_staff.staffDo.UseModel(&model.Staff{})

	tableName := _staff.staffDo.TableName()
	_staff.ALL = field.NewField(tableName, "*")
	_staff.Uid = field.NewString(tableName, "uid")
	_staff.Name = field.NewString(tableName, "name")
	_staff.Password = field.NewString(tableName, "password")
	_staff.Hospital = field.NewString(tableName, "hospital")
	_staff.Department = field.NewString(tableName, "department")
	_staff.JobNumber = field.NewString(tableName, "job_number")
	_staff.IdCardNumber = field.NewString(tableName, "id_card_number")
	_staff.RegisterTime = field.NewString(tableName, "register_time")
	_staff.LastLoginTime = field.NewString(tableName, "last_login_time")
	_staff.Token = field.NewString(tableName, "token")

	_staff.fillFieldMap()

	return _staff
}

type staff struct {
	staffDo staffDo

	ALL           field.Field
	Uid           field.String
	Name          field.String
	Password      field.String
	Hospital      field.String
	Department    field.String
	JobNumber     field.String
	IdCardNumber  field.String
	RegisterTime  field.String
	LastLoginTime field.String
	Token         field.String

	fieldMap map[string]field.Expr
}

func (s staff) Table(newTableName string) *staff {
	s.staffDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s staff) As(alias string) *staff {
	s.staffDo.DO = *(s.staffDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *staff) updateTableName(table string) *staff {
	s.ALL = field.NewField(table, "*")
	s.Uid = field.NewString(table, "uid")
	s.Name = field.NewString(table, "name")
	s.Password = field.NewString(table, "password")
	s.Hospital = field.NewString(table, "hospital")
	s.Department = field.NewString(table, "department")
	s.JobNumber = field.NewString(table, "job_number")
	s.IdCardNumber = field.NewString(table, "id_card_number")
	s.RegisterTime = field.NewString(table, "register_time")
	s.LastLoginTime = field.NewString(table, "last_login_time")
	s.Token = field.NewString(table, "token")

	s.fillFieldMap()

	return s
}

func (s *staff) WithContext(ctx context.Context) *staffDo { return s.staffDo.WithContext(ctx) }

func (s staff) TableName() string { return s.staffDo.TableName() }

func (s staff) Alias() string { return s.staffDo.Alias() }

func (s *staff) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *staff) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["uid"] = s.Uid
	s.fieldMap["name"] = s.Name
	s.fieldMap["password"] = s.Password
	s.fieldMap["hospital"] = s.Hospital
	s.fieldMap["department"] = s.Department
	s.fieldMap["job_number"] = s.JobNumber
	s.fieldMap["id_card_number"] = s.IdCardNumber
	s.fieldMap["register_time"] = s.RegisterTime
	s.fieldMap["last_login_time"] = s.LastLoginTime
	s.fieldMap["token"] = s.Token
}

func (s staff) clone(db *gorm.DB) staff {
	s.staffDo.ReplaceDB(db)
	return s
}

type staffDo struct{ gen.DO }

func (s staffDo) Debug() *staffDo {
	return s.withDO(s.DO.Debug())
}

func (s staffDo) WithContext(ctx context.Context) *staffDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s staffDo) Clauses(conds ...clause.Expression) *staffDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s staffDo) Returning(value interface{}, columns ...string) *staffDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s staffDo) Not(conds ...gen.Condition) *staffDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s staffDo) Or(conds ...gen.Condition) *staffDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s staffDo) Select(conds ...field.Expr) *staffDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s staffDo) Where(conds ...gen.Condition) *staffDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s staffDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *staffDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s staffDo) Order(conds ...field.Expr) *staffDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s staffDo) Distinct(cols ...field.Expr) *staffDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s staffDo) Omit(cols ...field.Expr) *staffDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s staffDo) Join(table schema.Tabler, on ...field.Expr) *staffDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s staffDo) LeftJoin(table schema.Tabler, on ...field.Expr) *staffDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s staffDo) RightJoin(table schema.Tabler, on ...field.Expr) *staffDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s staffDo) Group(cols ...field.Expr) *staffDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s staffDo) Having(conds ...gen.Condition) *staffDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s staffDo) Limit(limit int) *staffDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s staffDo) Offset(offset int) *staffDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s staffDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *staffDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s staffDo) Unscoped() *staffDo {
	return s.withDO(s.DO.Unscoped())
}

func (s staffDo) Create(values ...*model.Staff) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s staffDo) CreateInBatches(values []*model.Staff, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s staffDo) Save(values ...*model.Staff) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s staffDo) First() (*model.Staff, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) Take() (*model.Staff, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) Last() (*model.Staff, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) Find() ([]*model.Staff, error) {
	result, err := s.DO.Find()
	return result.([]*model.Staff), err
}

func (s staffDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Staff, err error) {
	buf := make([]*model.Staff, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s staffDo) FindInBatches(result *[]*model.Staff, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s staffDo) Attrs(attrs ...field.AssignExpr) *staffDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s staffDo) Assign(attrs ...field.AssignExpr) *staffDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s staffDo) Joins(fields ...field.RelationField) *staffDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s staffDo) Preload(fields ...field.RelationField) *staffDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s staffDo) FirstOrInit() (*model.Staff, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) FirstOrCreate() (*model.Staff, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Staff), nil
	}
}

func (s staffDo) FindByPage(offset int, limit int) (result []*model.Staff, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s staffDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *staffDo) withDO(do gen.Dao) *staffDo {
	s.DO = *do.(*gen.DO)
	return s
}
