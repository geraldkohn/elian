// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/geraldkohn/elian/data/model"
)

func newAgency(db *gorm.DB) agency {
	_agency := agency{}

	_agency.agencyDo.UseDB(db)
	_agency.agencyDo.UseModel(&model.Agency{})

	tableName := _agency.agencyDo.TableName()
	_agency.ALL = field.NewField(tableName, "*")
	_agency.Uid = field.NewString(tableName, "uid")
	_agency.License = field.NewString(tableName, "license")
	_agency.RegisterTime = field.NewString(tableName, "register_time")
	_agency.LastLoginTime = field.NewString(tableName, "last_login_time")
	_agency.Token = field.NewString(tableName, "token")

	_agency.fillFieldMap()

	return _agency
}

type agency struct {
	agencyDo agencyDo

	ALL           field.Field
	Uid           field.String
	License       field.String
	RegisterTime  field.String
	LastLoginTime field.String
	Token         field.String

	fieldMap map[string]field.Expr
}

func (a agency) Table(newTableName string) *agency {
	a.agencyDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agency) As(alias string) *agency {
	a.agencyDo.DO = *(a.agencyDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agency) updateTableName(table string) *agency {
	a.ALL = field.NewField(table, "*")
	a.Uid = field.NewString(table, "uid")
	a.License = field.NewString(table, "license")
	a.RegisterTime = field.NewString(table, "register_time")
	a.LastLoginTime = field.NewString(table, "last_login_time")
	a.Token = field.NewString(table, "token")

	a.fillFieldMap()

	return a
}

func (a *agency) WithContext(ctx context.Context) *agencyDo { return a.agencyDo.WithContext(ctx) }

func (a agency) TableName() string { return a.agencyDo.TableName() }

func (a agency) Alias() string { return a.agencyDo.Alias() }

func (a *agency) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agency) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["uid"] = a.Uid
	a.fieldMap["license"] = a.License
	a.fieldMap["register_time"] = a.RegisterTime
	a.fieldMap["last_login_time"] = a.LastLoginTime
	a.fieldMap["token"] = a.Token
}

func (a agency) clone(db *gorm.DB) agency {
	a.agencyDo.ReplaceDB(db)
	return a
}

type agencyDo struct{ gen.DO }

func (a agencyDo) Debug() *agencyDo {
	return a.withDO(a.DO.Debug())
}

func (a agencyDo) WithContext(ctx context.Context) *agencyDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agencyDo) Clauses(conds ...clause.Expression) *agencyDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agencyDo) Returning(value interface{}, columns ...string) *agencyDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agencyDo) Not(conds ...gen.Condition) *agencyDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agencyDo) Or(conds ...gen.Condition) *agencyDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agencyDo) Select(conds ...field.Expr) *agencyDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agencyDo) Where(conds ...gen.Condition) *agencyDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agencyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *agencyDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a agencyDo) Order(conds ...field.Expr) *agencyDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agencyDo) Distinct(cols ...field.Expr) *agencyDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agencyDo) Omit(cols ...field.Expr) *agencyDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agencyDo) Join(table schema.Tabler, on ...field.Expr) *agencyDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agencyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *agencyDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agencyDo) RightJoin(table schema.Tabler, on ...field.Expr) *agencyDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agencyDo) Group(cols ...field.Expr) *agencyDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agencyDo) Having(conds ...gen.Condition) *agencyDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agencyDo) Limit(limit int) *agencyDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agencyDo) Offset(offset int) *agencyDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agencyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *agencyDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agencyDo) Unscoped() *agencyDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agencyDo) Create(values ...*model.Agency) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agencyDo) CreateInBatches(values []*model.Agency, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agencyDo) Save(values ...*model.Agency) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agencyDo) First() (*model.Agency, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agency), nil
	}
}

func (a agencyDo) Take() (*model.Agency, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agency), nil
	}
}

func (a agencyDo) Last() (*model.Agency, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agency), nil
	}
}

func (a agencyDo) Find() ([]*model.Agency, error) {
	result, err := a.DO.Find()
	return result.([]*model.Agency), err
}

func (a agencyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Agency, err error) {
	buf := make([]*model.Agency, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agencyDo) FindInBatches(result *[]*model.Agency, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agencyDo) Attrs(attrs ...field.AssignExpr) *agencyDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agencyDo) Assign(attrs ...field.AssignExpr) *agencyDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agencyDo) Joins(fields ...field.RelationField) *agencyDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agencyDo) Preload(fields ...field.RelationField) *agencyDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agencyDo) FirstOrInit() (*model.Agency, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agency), nil
	}
}

func (a agencyDo) FirstOrCreate() (*model.Agency, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agency), nil
	}
}

func (a agencyDo) FindByPage(offset int, limit int) (result []*model.Agency, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agencyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *agencyDo) withDO(do gen.Dao) *agencyDo {
	a.DO = *do.(*gen.DO)
	return a
}
