// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/geraldkohn/elian/data/model"
)

func newRecord(db *gorm.DB) record {
	_record := record{}

	_record.recordDo.UseDB(db)
	_record.recordDo.UseModel(&model.Record{})

	tableName := _record.recordDo.TableName()
	_record.ALL = field.NewField(tableName, "*")
	_record.Uid = field.NewString(tableName, "uid")
	_record.PatientUid = field.NewString(tableName, "patient_uid")
	_record.WriteStaffUid = field.NewString(tableName, "write_staff_uid")
	_record.ReadOnlyStaffUid = field.NewString(tableName, "read_only_staff_uid")
	_record.PhotoHash = field.NewString(tableName, "photo_hash")
	_record.DocumentHash = field.NewString(tableName, "document_hash")
	_record.LastChangeTime = field.NewString(tableName, "last_change_time")
	_record.Description = field.NewString(tableName, "description")

	_record.fillFieldMap()

	return _record
}

type record struct {
	recordDo recordDo

	ALL              field.Field
	Uid              field.String
	PatientUid       field.String
	WriteStaffUid    field.String
	ReadOnlyStaffUid field.String
	PhotoHash        field.String
	DocumentHash     field.String
	LastChangeTime   field.String
	Description      field.String

	fieldMap map[string]field.Expr
}

func (r record) Table(newTableName string) *record {
	r.recordDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r record) As(alias string) *record {
	r.recordDo.DO = *(r.recordDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *record) updateTableName(table string) *record {
	r.ALL = field.NewField(table, "*")
	r.Uid = field.NewString(table, "uid")
	r.PatientUid = field.NewString(table, "patient_uid")
	r.WriteStaffUid = field.NewString(table, "write_staff_uid")
	r.ReadOnlyStaffUid = field.NewString(table, "read_only_staff_uid")
	r.PhotoHash = field.NewString(table, "photo_hash")
	r.DocumentHash = field.NewString(table, "document_hash")
	r.LastChangeTime = field.NewString(table, "last_change_time")
	r.Description = field.NewString(table, "description")

	r.fillFieldMap()

	return r
}

func (r *record) WithContext(ctx context.Context) *recordDo { return r.recordDo.WithContext(ctx) }

func (r record) TableName() string { return r.recordDo.TableName() }

func (r record) Alias() string { return r.recordDo.Alias() }

func (r *record) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *record) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["uid"] = r.Uid
	r.fieldMap["patient_uid"] = r.PatientUid
	r.fieldMap["write_staff_uid"] = r.WriteStaffUid
	r.fieldMap["read_only_staff_uid"] = r.ReadOnlyStaffUid
	r.fieldMap["photo_hash"] = r.PhotoHash
	r.fieldMap["document_hash"] = r.DocumentHash
	r.fieldMap["last_change_time"] = r.LastChangeTime
	r.fieldMap["description"] = r.Description
}

func (r record) clone(db *gorm.DB) record {
	r.recordDo.ReplaceDB(db)
	return r
}

type recordDo struct{ gen.DO }

func (r recordDo) Debug() *recordDo {
	return r.withDO(r.DO.Debug())
}

func (r recordDo) WithContext(ctx context.Context) *recordDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recordDo) Clauses(conds ...clause.Expression) *recordDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recordDo) Returning(value interface{}, columns ...string) *recordDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recordDo) Not(conds ...gen.Condition) *recordDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recordDo) Or(conds ...gen.Condition) *recordDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recordDo) Select(conds ...field.Expr) *recordDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recordDo) Where(conds ...gen.Condition) *recordDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *recordDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recordDo) Order(conds ...field.Expr) *recordDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recordDo) Distinct(cols ...field.Expr) *recordDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recordDo) Omit(cols ...field.Expr) *recordDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recordDo) Join(table schema.Tabler, on ...field.Expr) *recordDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *recordDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recordDo) RightJoin(table schema.Tabler, on ...field.Expr) *recordDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recordDo) Group(cols ...field.Expr) *recordDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recordDo) Having(conds ...gen.Condition) *recordDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recordDo) Limit(limit int) *recordDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recordDo) Offset(offset int) *recordDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *recordDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recordDo) Unscoped() *recordDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recordDo) Create(values ...*model.Record) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recordDo) CreateInBatches(values []*model.Record, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recordDo) Save(values ...*model.Record) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recordDo) First() (*model.Record, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) Take() (*model.Record, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) Last() (*model.Record, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) Find() ([]*model.Record, error) {
	result, err := r.DO.Find()
	return result.([]*model.Record), err
}

func (r recordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Record, err error) {
	buf := make([]*model.Record, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recordDo) FindInBatches(result *[]*model.Record, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recordDo) Attrs(attrs ...field.AssignExpr) *recordDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recordDo) Assign(attrs ...field.AssignExpr) *recordDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recordDo) Joins(fields ...field.RelationField) *recordDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recordDo) Preload(fields ...field.RelationField) *recordDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recordDo) FirstOrInit() (*model.Record, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) FirstOrCreate() (*model.Record, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) FindByPage(offset int, limit int) (result []*model.Record, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r *recordDo) withDO(do gen.Dao) *recordDo {
	r.DO = *do.(*gen.DO)
	return r
}
