// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/geraldkohn/elian/data/model"
)

func newPatientuidToRecorduid(db *gorm.DB) patientuidToRecorduid {
	_patientuidToRecorduid := patientuidToRecorduid{}

	_patientuidToRecorduid.patientuidToRecorduidDo.UseDB(db)
	_patientuidToRecorduid.patientuidToRecorduidDo.UseModel(&model.PatientuidToRecorduid{})

	tableName := _patientuidToRecorduid.patientuidToRecorduidDo.TableName()
	_patientuidToRecorduid.ALL = field.NewField(tableName, "*")
	_patientuidToRecorduid.Uid = field.NewString(tableName, "uid")
	_patientuidToRecorduid.PatientUid = field.NewString(tableName, "patient_uid")
	_patientuidToRecorduid.RecordUid = field.NewString(tableName, "record_uid")

	_patientuidToRecorduid.fillFieldMap()

	return _patientuidToRecorduid
}

type patientuidToRecorduid struct {
	patientuidToRecorduidDo patientuidToRecorduidDo

	ALL        field.Field
	Uid        field.String
	PatientUid field.String
	RecordUid  field.String

	fieldMap map[string]field.Expr
}

func (p patientuidToRecorduid) Table(newTableName string) *patientuidToRecorduid {
	p.patientuidToRecorduidDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p patientuidToRecorduid) As(alias string) *patientuidToRecorduid {
	p.patientuidToRecorduidDo.DO = *(p.patientuidToRecorduidDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *patientuidToRecorduid) updateTableName(table string) *patientuidToRecorduid {
	p.ALL = field.NewField(table, "*")
	p.Uid = field.NewString(table, "uid")
	p.PatientUid = field.NewString(table, "patient_uid")
	p.RecordUid = field.NewString(table, "record_uid")

	p.fillFieldMap()

	return p
}

func (p *patientuidToRecorduid) WithContext(ctx context.Context) *patientuidToRecorduidDo {
	return p.patientuidToRecorduidDo.WithContext(ctx)
}

func (p patientuidToRecorduid) TableName() string { return p.patientuidToRecorduidDo.TableName() }

func (p patientuidToRecorduid) Alias() string { return p.patientuidToRecorduidDo.Alias() }

func (p *patientuidToRecorduid) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *patientuidToRecorduid) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["uid"] = p.Uid
	p.fieldMap["patient_uid"] = p.PatientUid
	p.fieldMap["record_uid"] = p.RecordUid
}

func (p patientuidToRecorduid) clone(db *gorm.DB) patientuidToRecorduid {
	p.patientuidToRecorduidDo.ReplaceDB(db)
	return p
}

type patientuidToRecorduidDo struct{ gen.DO }

func (p patientuidToRecorduidDo) Debug() *patientuidToRecorduidDo {
	return p.withDO(p.DO.Debug())
}

func (p patientuidToRecorduidDo) WithContext(ctx context.Context) *patientuidToRecorduidDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p patientuidToRecorduidDo) Clauses(conds ...clause.Expression) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p patientuidToRecorduidDo) Returning(value interface{}, columns ...string) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p patientuidToRecorduidDo) Not(conds ...gen.Condition) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p patientuidToRecorduidDo) Or(conds ...gen.Condition) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p patientuidToRecorduidDo) Select(conds ...field.Expr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p patientuidToRecorduidDo) Where(conds ...gen.Condition) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p patientuidToRecorduidDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *patientuidToRecorduidDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p patientuidToRecorduidDo) Order(conds ...field.Expr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p patientuidToRecorduidDo) Distinct(cols ...field.Expr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p patientuidToRecorduidDo) Omit(cols ...field.Expr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p patientuidToRecorduidDo) Join(table schema.Tabler, on ...field.Expr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p patientuidToRecorduidDo) LeftJoin(table schema.Tabler, on ...field.Expr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p patientuidToRecorduidDo) RightJoin(table schema.Tabler, on ...field.Expr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p patientuidToRecorduidDo) Group(cols ...field.Expr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p patientuidToRecorduidDo) Having(conds ...gen.Condition) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p patientuidToRecorduidDo) Limit(limit int) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p patientuidToRecorduidDo) Offset(offset int) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p patientuidToRecorduidDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p patientuidToRecorduidDo) Unscoped() *patientuidToRecorduidDo {
	return p.withDO(p.DO.Unscoped())
}

func (p patientuidToRecorduidDo) Create(values ...*model.PatientuidToRecorduid) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p patientuidToRecorduidDo) CreateInBatches(values []*model.PatientuidToRecorduid, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p patientuidToRecorduidDo) Save(values ...*model.PatientuidToRecorduid) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p patientuidToRecorduidDo) First() (*model.PatientuidToRecorduid, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PatientuidToRecorduid), nil
	}
}

func (p patientuidToRecorduidDo) Take() (*model.PatientuidToRecorduid, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PatientuidToRecorduid), nil
	}
}

func (p patientuidToRecorduidDo) Last() (*model.PatientuidToRecorduid, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PatientuidToRecorduid), nil
	}
}

func (p patientuidToRecorduidDo) Find() ([]*model.PatientuidToRecorduid, error) {
	result, err := p.DO.Find()
	return result.([]*model.PatientuidToRecorduid), err
}

func (p patientuidToRecorduidDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PatientuidToRecorduid, err error) {
	buf := make([]*model.PatientuidToRecorduid, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p patientuidToRecorduidDo) FindInBatches(result *[]*model.PatientuidToRecorduid, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p patientuidToRecorduidDo) Attrs(attrs ...field.AssignExpr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p patientuidToRecorduidDo) Assign(attrs ...field.AssignExpr) *patientuidToRecorduidDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p patientuidToRecorduidDo) Joins(fields ...field.RelationField) *patientuidToRecorduidDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p patientuidToRecorduidDo) Preload(fields ...field.RelationField) *patientuidToRecorduidDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p patientuidToRecorduidDo) FirstOrInit() (*model.PatientuidToRecorduid, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PatientuidToRecorduid), nil
	}
}

func (p patientuidToRecorduidDo) FirstOrCreate() (*model.PatientuidToRecorduid, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PatientuidToRecorduid), nil
	}
}

func (p patientuidToRecorduidDo) FindByPage(offset int, limit int) (result []*model.PatientuidToRecorduid, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p patientuidToRecorduidDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p *patientuidToRecorduidDo) withDO(do gen.Dao) *patientuidToRecorduidDo {
	p.DO = *do.(*gen.DO)
	return p
}
