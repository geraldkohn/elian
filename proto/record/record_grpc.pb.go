// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: proto/record/record.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordServiceClient interface {
	StaffCreateRecord(ctx context.Context, in *StaffCreateRecordRequest, opts ...grpc.CallOption) (*StaffCreateRecordResponse, error)
	PatientQueryRecords(ctx context.Context, in *PatientQueryRecordsRequest, opts ...grpc.CallOption) (*PatientQueryRecordsResponse, error)
	StaffQueryRecords(ctx context.Context, in *StaffQueryRecordsRequest, opts ...grpc.CallOption) (*StaffQueryRecordsResponse, error)
	AgencyQueryRecords(ctx context.Context, in *AgencyQueryRecordsRequest, opts ...grpc.CallOption) (*AgencyQueryRecordsResponse, error)
	StaffSetReadAndWritePermission(ctx context.Context, in *StaffSetReadAndWritePermissionRequest, opts ...grpc.CallOption) (*StaffSetReadAndWritePermissionResponse, error)
	StaffSetReadOnlyPermission(ctx context.Context, in *StaffSetReadOnlyPermissionRequest, opts ...grpc.CallOption) (*StaffSetReadOnlyPermissionResponse, error)
	AgencySetReadAndWritePermission(ctx context.Context, in *AgencySetReadAndWritePermissionRequest, opts ...grpc.CallOption) (*AgencySetReadAndWritePermissionResponse, error)
	AgencySetReadOnlyPermission(ctx context.Context, in *AgencySetReadOnlyPermissionRequest, opts ...grpc.CallOption) (*AgencySetReadOnlyPermissionResponse, error)
	StaffUpdatePhotoHash(ctx context.Context, in *StaffUpdatePhotoHashRequest, opts ...grpc.CallOption) (*StaffUpdatePhotoHashResponse, error)
	StaffUpdateDocumentHash(ctx context.Context, in *StaffUpdateDocumentHashRequest, opts ...grpc.CallOption) (*StaffUpdateDocumentHashResponse, error)
	StaffUpdateDescription(ctx context.Context, in *StaffUpdateDescriptionRequest, opts ...grpc.CallOption) (*StaffUpdateDescriptionResponse, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) StaffCreateRecord(ctx context.Context, in *StaffCreateRecordRequest, opts ...grpc.CallOption) (*StaffCreateRecordResponse, error) {
	out := new(StaffCreateRecordResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/StaffCreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) PatientQueryRecords(ctx context.Context, in *PatientQueryRecordsRequest, opts ...grpc.CallOption) (*PatientQueryRecordsResponse, error) {
	out := new(PatientQueryRecordsResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/PatientQueryRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) StaffQueryRecords(ctx context.Context, in *StaffQueryRecordsRequest, opts ...grpc.CallOption) (*StaffQueryRecordsResponse, error) {
	out := new(StaffQueryRecordsResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/StaffQueryRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) AgencyQueryRecords(ctx context.Context, in *AgencyQueryRecordsRequest, opts ...grpc.CallOption) (*AgencyQueryRecordsResponse, error) {
	out := new(AgencyQueryRecordsResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/AgencyQueryRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) StaffSetReadAndWritePermission(ctx context.Context, in *StaffSetReadAndWritePermissionRequest, opts ...grpc.CallOption) (*StaffSetReadAndWritePermissionResponse, error) {
	out := new(StaffSetReadAndWritePermissionResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/StaffSetReadAndWritePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) StaffSetReadOnlyPermission(ctx context.Context, in *StaffSetReadOnlyPermissionRequest, opts ...grpc.CallOption) (*StaffSetReadOnlyPermissionResponse, error) {
	out := new(StaffSetReadOnlyPermissionResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/StaffSetReadOnlyPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) AgencySetReadAndWritePermission(ctx context.Context, in *AgencySetReadAndWritePermissionRequest, opts ...grpc.CallOption) (*AgencySetReadAndWritePermissionResponse, error) {
	out := new(AgencySetReadAndWritePermissionResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/AgencySetReadAndWritePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) AgencySetReadOnlyPermission(ctx context.Context, in *AgencySetReadOnlyPermissionRequest, opts ...grpc.CallOption) (*AgencySetReadOnlyPermissionResponse, error) {
	out := new(AgencySetReadOnlyPermissionResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/AgencySetReadOnlyPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) StaffUpdatePhotoHash(ctx context.Context, in *StaffUpdatePhotoHashRequest, opts ...grpc.CallOption) (*StaffUpdatePhotoHashResponse, error) {
	out := new(StaffUpdatePhotoHashResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/StaffUpdatePhotoHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) StaffUpdateDocumentHash(ctx context.Context, in *StaffUpdateDocumentHashRequest, opts ...grpc.CallOption) (*StaffUpdateDocumentHashResponse, error) {
	out := new(StaffUpdateDocumentHashResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/StaffUpdateDocumentHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) StaffUpdateDescription(ctx context.Context, in *StaffUpdateDescriptionRequest, opts ...grpc.CallOption) (*StaffUpdateDescriptionResponse, error) {
	out := new(StaffUpdateDescriptionResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/StaffUpdateDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServiceServer is the server API for RecordService service.
// All implementations should embed UnimplementedRecordServiceServer
// for forward compatibility
type RecordServiceServer interface {
	StaffCreateRecord(context.Context, *StaffCreateRecordRequest) (*StaffCreateRecordResponse, error)
	PatientQueryRecords(context.Context, *PatientQueryRecordsRequest) (*PatientQueryRecordsResponse, error)
	StaffQueryRecords(context.Context, *StaffQueryRecordsRequest) (*StaffQueryRecordsResponse, error)
	AgencyQueryRecords(context.Context, *AgencyQueryRecordsRequest) (*AgencyQueryRecordsResponse, error)
	StaffSetReadAndWritePermission(context.Context, *StaffSetReadAndWritePermissionRequest) (*StaffSetReadAndWritePermissionResponse, error)
	StaffSetReadOnlyPermission(context.Context, *StaffSetReadOnlyPermissionRequest) (*StaffSetReadOnlyPermissionResponse, error)
	AgencySetReadAndWritePermission(context.Context, *AgencySetReadAndWritePermissionRequest) (*AgencySetReadAndWritePermissionResponse, error)
	AgencySetReadOnlyPermission(context.Context, *AgencySetReadOnlyPermissionRequest) (*AgencySetReadOnlyPermissionResponse, error)
	StaffUpdatePhotoHash(context.Context, *StaffUpdatePhotoHashRequest) (*StaffUpdatePhotoHashResponse, error)
	StaffUpdateDocumentHash(context.Context, *StaffUpdateDocumentHashRequest) (*StaffUpdateDocumentHashResponse, error)
	StaffUpdateDescription(context.Context, *StaffUpdateDescriptionRequest) (*StaffUpdateDescriptionResponse, error)
}

// UnimplementedRecordServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (UnimplementedRecordServiceServer) StaffCreateRecord(context.Context, *StaffCreateRecordRequest) (*StaffCreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffCreateRecord not implemented")
}
func (UnimplementedRecordServiceServer) PatientQueryRecords(context.Context, *PatientQueryRecordsRequest) (*PatientQueryRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatientQueryRecords not implemented")
}
func (UnimplementedRecordServiceServer) StaffQueryRecords(context.Context, *StaffQueryRecordsRequest) (*StaffQueryRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffQueryRecords not implemented")
}
func (UnimplementedRecordServiceServer) AgencyQueryRecords(context.Context, *AgencyQueryRecordsRequest) (*AgencyQueryRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgencyQueryRecords not implemented")
}
func (UnimplementedRecordServiceServer) StaffSetReadAndWritePermission(context.Context, *StaffSetReadAndWritePermissionRequest) (*StaffSetReadAndWritePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffSetReadAndWritePermission not implemented")
}
func (UnimplementedRecordServiceServer) StaffSetReadOnlyPermission(context.Context, *StaffSetReadOnlyPermissionRequest) (*StaffSetReadOnlyPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffSetReadOnlyPermission not implemented")
}
func (UnimplementedRecordServiceServer) AgencySetReadAndWritePermission(context.Context, *AgencySetReadAndWritePermissionRequest) (*AgencySetReadAndWritePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgencySetReadAndWritePermission not implemented")
}
func (UnimplementedRecordServiceServer) AgencySetReadOnlyPermission(context.Context, *AgencySetReadOnlyPermissionRequest) (*AgencySetReadOnlyPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgencySetReadOnlyPermission not implemented")
}
func (UnimplementedRecordServiceServer) StaffUpdatePhotoHash(context.Context, *StaffUpdatePhotoHashRequest) (*StaffUpdatePhotoHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffUpdatePhotoHash not implemented")
}
func (UnimplementedRecordServiceServer) StaffUpdateDocumentHash(context.Context, *StaffUpdateDocumentHashRequest) (*StaffUpdateDocumentHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffUpdateDocumentHash not implemented")
}
func (UnimplementedRecordServiceServer) StaffUpdateDescription(context.Context, *StaffUpdateDescriptionRequest) (*StaffUpdateDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffUpdateDescription not implemented")
}

// UnsafeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServiceServer will
// result in compilation errors.
type UnsafeRecordServiceServer interface {
	mustEmbedUnimplementedRecordServiceServer()
}

func RegisterRecordServiceServer(s grpc.ServiceRegistrar, srv RecordServiceServer) {
	s.RegisterService(&RecordService_ServiceDesc, srv)
}

func _RecordService_StaffCreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffCreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).StaffCreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/StaffCreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).StaffCreateRecord(ctx, req.(*StaffCreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_PatientQueryRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientQueryRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).PatientQueryRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/PatientQueryRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).PatientQueryRecords(ctx, req.(*PatientQueryRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_StaffQueryRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffQueryRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).StaffQueryRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/StaffQueryRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).StaffQueryRecords(ctx, req.(*StaffQueryRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_AgencyQueryRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgencyQueryRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).AgencyQueryRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/AgencyQueryRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).AgencyQueryRecords(ctx, req.(*AgencyQueryRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_StaffSetReadAndWritePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffSetReadAndWritePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).StaffSetReadAndWritePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/StaffSetReadAndWritePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).StaffSetReadAndWritePermission(ctx, req.(*StaffSetReadAndWritePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_StaffSetReadOnlyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffSetReadOnlyPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).StaffSetReadOnlyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/StaffSetReadOnlyPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).StaffSetReadOnlyPermission(ctx, req.(*StaffSetReadOnlyPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_AgencySetReadAndWritePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgencySetReadAndWritePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).AgencySetReadAndWritePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/AgencySetReadAndWritePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).AgencySetReadAndWritePermission(ctx, req.(*AgencySetReadAndWritePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_AgencySetReadOnlyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgencySetReadOnlyPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).AgencySetReadOnlyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/AgencySetReadOnlyPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).AgencySetReadOnlyPermission(ctx, req.(*AgencySetReadOnlyPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_StaffUpdatePhotoHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffUpdatePhotoHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).StaffUpdatePhotoHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/StaffUpdatePhotoHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).StaffUpdatePhotoHash(ctx, req.(*StaffUpdatePhotoHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_StaffUpdateDocumentHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffUpdateDocumentHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).StaffUpdateDocumentHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/StaffUpdateDocumentHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).StaffUpdateDocumentHash(ctx, req.(*StaffUpdateDocumentHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_StaffUpdateDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffUpdateDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).StaffUpdateDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/StaffUpdateDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).StaffUpdateDescription(ctx, req.(*StaffUpdateDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordService_ServiceDesc is the grpc.ServiceDesc for RecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "record.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StaffCreateRecord",
			Handler:    _RecordService_StaffCreateRecord_Handler,
		},
		{
			MethodName: "PatientQueryRecords",
			Handler:    _RecordService_PatientQueryRecords_Handler,
		},
		{
			MethodName: "StaffQueryRecords",
			Handler:    _RecordService_StaffQueryRecords_Handler,
		},
		{
			MethodName: "AgencyQueryRecords",
			Handler:    _RecordService_AgencyQueryRecords_Handler,
		},
		{
			MethodName: "StaffSetReadAndWritePermission",
			Handler:    _RecordService_StaffSetReadAndWritePermission_Handler,
		},
		{
			MethodName: "StaffSetReadOnlyPermission",
			Handler:    _RecordService_StaffSetReadOnlyPermission_Handler,
		},
		{
			MethodName: "AgencySetReadAndWritePermission",
			Handler:    _RecordService_AgencySetReadAndWritePermission_Handler,
		},
		{
			MethodName: "AgencySetReadOnlyPermission",
			Handler:    _RecordService_AgencySetReadOnlyPermission_Handler,
		},
		{
			MethodName: "StaffUpdatePhotoHash",
			Handler:    _RecordService_StaffUpdatePhotoHash_Handler,
		},
		{
			MethodName: "StaffUpdateDocumentHash",
			Handler:    _RecordService_StaffUpdateDocumentHash_Handler,
		},
		{
			MethodName: "StaffUpdateDescription",
			Handler:    _RecordService_StaffUpdateDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/record/record.proto",
}
