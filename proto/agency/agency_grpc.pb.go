// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: proto/agency/agency.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgencyServiceClient is the client API for AgencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgencyServiceClient interface {
	CreateAgency(ctx context.Context, in *CreateAgencyRequest, opts ...grpc.CallOption) (*CreateAgencyResponse, error)
	AgencyLogin(ctx context.Context, in *AgencyLoginRequest, opts ...grpc.CallOption) (*AgencyLoginResponse, error)
}

type agencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgencyServiceClient(cc grpc.ClientConnInterface) AgencyServiceClient {
	return &agencyServiceClient{cc}
}

func (c *agencyServiceClient) CreateAgency(ctx context.Context, in *CreateAgencyRequest, opts ...grpc.CallOption) (*CreateAgencyResponse, error) {
	out := new(CreateAgencyResponse)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/CreateAgency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AgencyLogin(ctx context.Context, in *AgencyLoginRequest, opts ...grpc.CallOption) (*AgencyLoginResponse, error) {
	out := new(AgencyLoginResponse)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AgencyLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgencyServiceServer is the server API for AgencyService service.
// All implementations should embed UnimplementedAgencyServiceServer
// for forward compatibility
type AgencyServiceServer interface {
	CreateAgency(context.Context, *CreateAgencyRequest) (*CreateAgencyResponse, error)
	AgencyLogin(context.Context, *AgencyLoginRequest) (*AgencyLoginResponse, error)
}

// UnimplementedAgencyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAgencyServiceServer struct {
}

func (UnimplementedAgencyServiceServer) CreateAgency(context.Context, *CreateAgencyRequest) (*CreateAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgency not implemented")
}
func (UnimplementedAgencyServiceServer) AgencyLogin(context.Context, *AgencyLoginRequest) (*AgencyLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgencyLogin not implemented")
}

// UnsafeAgencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgencyServiceServer will
// result in compilation errors.
type UnsafeAgencyServiceServer interface {
	mustEmbedUnimplementedAgencyServiceServer()
}

func RegisterAgencyServiceServer(s grpc.ServiceRegistrar, srv AgencyServiceServer) {
	s.RegisterService(&AgencyService_ServiceDesc, srv)
}

func _AgencyService_CreateAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).CreateAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/CreateAgency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).CreateAgency(ctx, req.(*CreateAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AgencyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgencyLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AgencyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AgencyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AgencyLogin(ctx, req.(*AgencyLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgencyService_ServiceDesc is the grpc.ServiceDesc for AgencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agency.AgencyService",
	HandlerType: (*AgencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAgency",
			Handler:    _AgencyService_CreateAgency_Handler,
		},
		{
			MethodName: "AgencyLogin",
			Handler:    _AgencyService_AgencyLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/agency/agency.proto",
}
